return("!no species found here!")
} else {
return(result)
}
}
#example running:
get_species_at_site(output_dir, coordinates = c(x=2,y=0), time=100)
install.packages("gdistance")
library(gdistance)
#example running:
get_species_at_site(output_dir, coordinates = c(x=2,y=0), time=100)
library(Imap)
install.packages("Imap")
## METADATA ===============================================================
## Description: launch 1 simulation of gen3sis for the deepdive project
##
## R version: 4.0.2 for Windows
## Date: 2022-02-28 12:55:58
## License: GPL3
## Author: Oskar Hagen (oskar@hagen.bio)
##=======================================================================##
library("Imap")
install.packages("Imap")
if (!require('devtools')) install.packages('devtools')  # Get devtools if you don't already have it.
remotes::install_github("John-R-Wallace-NOAA/Imap", force = TRUE)
# # Some R installations may require: download.file.method = "auto" in options():
# oldOpts <- options(download.file.method = "auto")
# remotes::install_github("John-R-Wallace-NOAA/Imap", force = TRUE)
# options(oldOpts)
library("Imap")
#example running:
get_species_at_site(output_dir, coordinates = c(x=2,y=0), time=100)
get_species_at_site(output_dir, coordinates = c(x=10,y=89), time=100)
get_species_at_site(output_dir, coordinates = c(x=10,y=89), time=90)
#example running:
get_species_at_site(output_dir, coordinates = c(x=2,y=0), time=100)
output:dir
output_dir
get_species_at_site(output_dir, coordinates = c(x=2,y=0), time=100)
get_species_at_site(output_dir, coordinates = c(x=20, y=30), time=0)
get_species_at_site(output_dir, coordinates = c(x=2,y=0), time=100)
get_species_at_site(output_dir, coordinates = c(x=10,y=89), time=100)
get_species_at_site(output_dir, coordinates = c(x=30,y=30), time=90)
get_species_at_site(output_dir, coordinates = c(x=30,y=30), time=20
)
get_species_at_site(output_dir, coordinates = c(x=30,y=30), time=20)
get_species_at_site(output_dir, coordinates = c(x=30,y=30), time=8
get_species_at_site(output_dir, coordinates = c(x=30,y=30), time=80)
get_species_at_site(output_dir, coordinates = c(x=30,y=39), time=90)
get_species_at_site(output_dir, coordinates = c(x=30,y=30), time=80)
get_species_at_site(output_dir, coordinates = c(x=30,y=30), time=80)
get_species_at_site(output_dir, coordinates = c(x=30,y=30), time=100)
get_species_at_site(output_dir, coordinates = c(x=50,y=60), time=100)
get_species_at_site(output_dir, coordinates = c(x=50,y=60), time=492)
get_species_at_site(output_dir, coordinates = c(x=50,y=60), time=490)
get_species_at_site(output_dir, coordinates = c(x=30,y=30), time=490)
output_dir
sp_540 <- readRDS("C:/Users/CooperR/Documents/GitHub/Genesis_DeepDive/output/config_deepdive_singlefuture/species/species_t_540.rds")
lc_540 <- readRDS("C:/Users/CooperR/Documents/GitHub/Genesis_DeepDive/output/config_deepdive_singlefuture/landscapes/landscape_t_540.rds")
plot_richness(sp_540, lc_540)
library(gen3sis)
plot_richness(sp_540, lc_540)
get_species_at_site(output_dir, coordinates = c(x=0,y=0), time=540)
points(10,20)
points(0,20)
get_species_at_site(output_dir, coordinates = c(x=0,y=20), time=540)
get_species_at_site(output_dir, coordinates = c(x=-10,y=20), time=540)
points(-10,20)
get_species_at_site(output_dir, coordinates = c(x=10,y=-10), time=540)
points(10,-20)
get_species_at_site(output_dir, coordinates = c(x=10,y=-20), time=540)
get_geo_richness(sp_540, lc_540)
lc_540$coordinates[rownames(lc_540$coordinates)=="201"]
get_species_at_site(output_dir, coordinates = c(x=-98,y=80), time=540)
lc_540
lc_540$environment
library(paleobioDB)
# Find fossil coordinates from the palaeobiology databa
# pbdb<- pbdb_occurrences(limit="all", interval="Devonian", show=c("coords", "phylo", "ident"))
url <- 'https://paleobiodb.org/data1.2/occs/list.csv?all_records&taxon_reso=family&idqual=certain&interval=Devonian,Quaternary&show=phylo,ident,coords,acconly'
pbdb <- read.csv(file = url)
occ_map <- pbdb_map_occur(data = pbdb)
# Find fossil coordinates from the palaeobiology databa
# pbdb<- pbdb_occurrences(limit="all", interval="Devonian", show=c("coords", "phylo", "ident"))
url <- 'https://paleobiodb.org/data1.2/occs/list.csv?all_records&taxon_reso=species&idqual=certain&interval=Devonian,Quaternary&show=phylo,ident,coords,acconly'
pbdb <- read.csv(file = url)
# Find fossil coordinates from the palaeobiology databa
# pbdb<- pbdb_occurrences(limit="all", interval="Devonian", show=c("coords", "phylo", "ident"))
url <- 'https://paleobiodb.org/data1.2/occs/list.csv?base_name=Tetrapoda&taxon_reso=species&idqual=certain&interval=Devonian,Quaternary&show=phylo,ident,coords,acconly'
pbdb <- read.csv(file = url)
occ_map <- pbdb_map_occur(data = pbdb)
occ_map
r_map <- pbdb_map_richness(data = pbdb)
pbdb$coords
head(pbdb)
# Find fossil coordinates from the palaeobiology databa
# pbdb<- pbdb_occurrences(limit="all", interval="Devonian", show=c("coords", "phylo", "ident"))
url <- 'https://paleobiodb.org/data1.2/occs/list.csv?base_name=Tetrapoda&taxon_reso=species&idqual=certain&interval=Devonian,Quaternary&show=phylo,ident,coords,acconly,paleoloc'
pbdb <- read.csv(file = url)
head(pbdb)
pbdb$paleolat
lc540
lc540
lc_540
head(lc_540$environment)
head(lc_540$coordinates)
median_age <- mean(pbdb$min_ma, pbdb$max_ma)
median_age <- ((pbdb$max_ma-pbdb$min_ma)/2) + pbdb$max_ma
head(median_age)
dim(median_age)
length(median_age)
occ_map <- pbdb_map_occur(data = pbdb, res = 10)  # draw a map
occ_map <- pbdb_map_occur(data = pbdb, res = 1)  # draw a map
dev.off()
x11()
occ_map <- pbdb_map_occur(data = pbdb, res = 1)  # draw a map
occ_map <- pbdb_map_occur(data = pbdb, res = 1)  # draw a map
occ_map <- pbdb_map_occur(data = pbdb, res = 1, col.eff = c("light blue", "red"))
occ_map <- pbdb_map_occur(data = pbdb, res = 1, col.eff = c("medium blue", "orange"))
occ_map <- pbdb_map_occur(data = pbdb, res = 1, col.eff = c("dodgerblue", "brightgreen"))
occ_map <- pbdb_map_occur(data = pbdb, res = 1, col.eff = c("dodgerblue", "green"))
head(pbdb$early_interval)
head(pbdb$late_interval)
head(pbdb)
pbdb$early_interval
install.packages(iNEXT)
use_git()
# Data pipeline Permo-Triassic marine animals
library(dplyr)
library(data.table)
library(tidyr)
library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0("R/", name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# custom_bins <- -c(264.26, 224.54, 192.9)
# Data pipeline Permo-Triassic marine animals
library(dplyr)
library(data.table)
library(tidyr)
library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0("R/", name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
# Data pipeline Permo-Triassic marine animals
library(dplyr)
dat <- read.csv(input_occs_file)
getwd()
# Data pipeline Permo-Triassic marine animals
library(dplyr)
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
dat <- read.csv(input_occs_file)
source("time_bins.R")
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, scale=bins_scale, begin=begin_bins,
finish=end_bins, r=replicates, age_m = age_method,
taxon_level=taxonomic_level, bins=bins, all_lr=T,
custom_bins=custom_bins, write_file=T)
custom_bins <- -c(264.26, 224.54, 192.9)
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, scale=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
bins=bins, all_lr=T, custom_bins=custom_bins,
write_file=T)
custom_bins
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, scale=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
bins=bins, all_lr=T, write_file=T)
# Data pipeline Permo-Triassic marine animals
library(dplyr)
library(data.table)
library(tidyr)
library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
source("time_bins.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
custom_bins <- -c(264.26, 224.54, 192.9)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
dd_input <- prep_dd_input(dat=dat, scale=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
bins=bins, all_lr=T, write_file=T)
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, bins_type=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
bins=bins, all_lr=T, write_file=T)
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, bin_type=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
bins=bins, all_lr=T, write_file=T)
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, bin_type=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
begin=begin_bins, finish=end_bins, all_lr=T,
write_file=T)
source("data_pipeline_utilities.R")
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, bin_type=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
begin=begin_bins, finish=end_bins, all_lr=T,
write_file=T)
source("data_pipeline_utilities.R")
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, bin_type=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
begin=begin_bins, finish=end_bins, all_lr=T,
write_file=T)
dd_inpit
dd_input
head(dd_un)
head(dd_input)
if(write_file ==T){
write.csv(deepdive_input, paste0(name, "empirical_data/deepdive_input.csv"),
row.names=FALSE)
}
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, bin_type=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
begin=begin_bins, finish=end_bins, all_lr=T,
write_file=T)
source("data_pipeline_utilities.R")
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, bin_type=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
begin=begin_bins, finish=end_bins, all_lr=T,
write_file=T)
source("data_pipeline_utilities.R")
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, bin_type=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
begin=begin_bins, finish=end_bins, all_lr=T,
write_file=T)
library(DeepDiveR)
install.packages("DeepDiveR")
library(DeepDiveR)
install.packages("Rtools")
load_all(".")
library(devtools)
load_all(".")
library(devtools)
load_all(".")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "stages"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
custom_bins <- -c(264.26, 224.54, 192.9)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, bin_type=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
begin=begin_bins, finish=end_bins, all_lr=T,
write_file=T)
load_all(".")
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, bin_type=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
begin=begin_bins, finish=end_bins, all_lr=T,
write_file=T)
library(devtools)
load_all(".")
ls
ls()
# Data pipeline Permo-Triassic marine animals
library(dplyr)
library(data.table)
library(tidyr)
library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
source("time_bins.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "stages"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
custom_bins <- -c(264.26, 224.54, 192.9)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, bin_type=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
begin=begin_bins, finish=end_bins, all_lr=T,
write_file=T)
library(devtools)
library(devtools)
load_all(".")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "stages"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
custom_bins <- -c(264.26, 224.54, 192.9)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
dd_input <- prep_dd_input(dat=dat, bin_type=bins_scale, r=replicates,
age_m = age_method, taxon_level=taxonomic_level,
begin=begin_bins, finish=end_bins, all_lr=T,
write_file=T)
###############################################################################
?dd_input
??dd_input
roxygenise()
library(roxygen2)
roxygenise()
getwd
getwd()
setwd("C:/Users/CooperR/Documents/DeepDiveR")
getwd
getwd()
roxygenise()
?DeepDiveR
??DeepDiveR
warnings()
time_bins(bin_type="epochs", begin = 237, finish=192.9)
load_all(".")
time_bins(bin_type="epochs", begin = 237, finish=192.9)
library(DeepDiveR)
time_bins(bin_type="epochs", begin = 237, finish=192.9)
library(DeepDiveR)
?DeepDiveR
roxygenise()
roxygenise()
?DeepDiveR
library(DeepDiveR)
?DeepDiveR
getwd()
time_bins(bin_type="epochs", begin=264.28, finish=192.9)
bins <- read.csv("geochart.csv")
bins <- read.csv("R/geochart.csv")
bins
geo_bins <- bins
geo_bins
usethis::use_data(geo_bins)
data("geo_bins")
geo_bins
time_bins(bin_type="epochs", begin=264.28, finish=192.9)
library(DeepDiveR)
name
geo_bins
data("geo_bins")
?DeepDiveR
oxygenise()
roxygenise()
?DeepDiveR
usethis::use_package_doc()
?DeepDiveR
devtools::document()
devtools::document()
devtools::document()
library(DeepDiveR)
document()
library(DeepDiveR)
document()
?DeepDiveR
?time_bins
?prep_dd_input
?assign_ages
?ages
?diplyr
library(dplyr)
?dplyr
?DeepDiveR
?DeepDiveR
?time_bins
?create_folders
?assign_res
library(DeepDiveR)
?assign_resolution
?assign_res
roxygenate()
roxygenise()
?assign_res
library(DeepDiveR)
roxygenise()
?get_lr_hr_dat
?fraction_lr_hr_dat
library(DeepDiveR)
roxygenise()
?ages
library(DeepDiveR)
roxygenise()
?generate_locality_dataset
library(DeepDiveR)
roxygenise()
?taxa_time_per_area
library(DeepDiveR)
roxygenise()
?generate_locality_dataset
?taxa_time_per_area
library(DeepDiveR)
roxygenise()
?generate_occurrence_dataset
