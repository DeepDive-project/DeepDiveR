dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
# Build low resolution time bins
lr_bins <- lr_hr_bins(res = "low", scale = "stages", begin = begin_bins,
finish = end_bins, use_q=T)
lr_bins_0 <- -c(lr_bins$start, min(lr_bins$end))
# Build high resolution time binswith boundaries that align to lr_bins with
# length 1 My on average
bins <- lr_hr_bins(res="high", scale = "stages", begin = begin_bins,
finish = end_bins, use_q=T)
bins
lr_bins
bins_0 <- -c(bins$start, min(bins$end))
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
# Build low resolution time bins
lr_bins <- lr_hr_bins(res = "low", scale = "stages", begin = begin_bins,
finish = end_bins, use_q=T)
lr_bins_0 <- -c(lr_bins$start, min(lr_bins$end))
# Build high resolution time bins with boundaries that align to lr_bins with
# length 1 My on average
bins <- lr_hr_bins(res="high", scale = "stages", begin = begin_bins,
finish = end_bins, use_q=T)
bins
lr_bins
lr_start <- c(as.numeric(lr_bins$start))
lr_end <- c(as.numeric(lr_bins$end))
lr_start
lr_end
n <- round(lr_start-lr_end)
n
resolution <- rep(NA, dim(dat)[1])
dat_res <- cbind(dat, resolution)
dat_res
head(dat$res)
head(dat_res)
lr_hr_bins(res="high", scale="stages", begin = 66, finish=0, use_q=T)
resolution <- rep(NA, dim(dat)[1])
dat_res <- cbind(dat, resolution)
dat_res
for(i in 1:length(dat$MinAge)){
dat_res$resolution[i] <- "LR"
for(j in 1:length(bins$start)){
if (dat$MaxAge[i] <= bins$start[j] && dat$MinAge[i] >= bins$end[j]){
dat_res$resolution[i] <- "HR"
}
}
}
dat_res
unique(dat_res$resolution)
assign_res(dat, age_range_threshold=NA, all_lr=F)
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
# Build low resolution time bins
lr_bins <- lr_hr_bins(res = "low", scale = "stages", begin = begin_bins,
finish = end_bins)
lr_bins_0 <- -c(lr_bins$start, min(lr_bins$end))
# Build high resolution time bins with boundaries that align to lr_bins with
# length 1 My on average                                                      ##### ADD BINS OF LENGTH NOT AVERAGING 1 Ma.
bins <- lr_hr_bins(res="high", scale = "stages", begin = begin_bins,
finish = end_bins)
bins_0 <- -c(bins$start, min(bins$end))
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
# Build low resolution time bins
lr_bins <- lr_hr_bins(res = "low", scale = "stages", begin = begin_bins,
finish = end_bins)
lr_bins_0 <- -c(lr_bins$start, min(lr_bins$end))
# Build high resolution time bins with boundaries that align to lr_bins with
# length 1 My on average                                                      ##### ADD BINS OF LENGTH NOT AVERAGING 1 Ma.
bins <- lr_hr_bins(res="high", scale = "stages", begin = begin_bins,
finish = end_bins)
bins_0 <- -c(bins$start, min(bins$end))
assign_res(dat, age_range_threshold=NA, all_lr=F)
dat_res
dat_res <- assign_res(dat, age_range_threshold=NA, all_lr=T)
dat_res
prep_dd_input <- function(dat, scale="stages", begin=begin_bins,
finish=end_bins, r=replicate, age_m="median",
taxon_level, age_range_threshold=NA, all_lr=F){
# Build low resolution time bins
lr_bins <- lr_hr_bins(res = "low", scale = scale, begin = begin, finish = finish)
lr_bins_0 <- -c(lr_bins$start, min(lr_bins$end))
# Build high resolution time bins with boundaries that align to lr_bins with
# length 1 My on average                                                      ##### ADD BINS OF LENGTH NOT AVERAGING 1 Ma.
bins <- lr_hr_bins(res="high", scale = scale, begin = begin, finish = finish)
bins_0 <- -c(bins$start, min(bins$end))
# Assign occurrences as high or low resolution
dat_res <- assign_res(dat, age_range_threshold=age_range_threshold, all_lr=all_lr)
# Get DeepDive input file
write_dd_files2(dat=dat, r=r, age_m=age_m, taxon_level=taxon_level, bins=bins)
}
prep_dd_input(dat=dat_res, scale="stages", begin=begin_bins, finish=end_bins,
r=replicates, age_m = age_method, taxon_level=taxonomic_level,
all_lr=T)
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
prep_dd_input(dat=dat_res, scale="stages", begin=begin_bins, finish=end_bins,
r=replicates, age_m = age_method, taxon_level=taxonomic_level,
all_lr=T)
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
prep_dd_input(dat=dat_res, scale="stages", begin=begin_bins, finish=end_bins,
r=replicates, age_m = age_method, taxon_level=taxonomic_level,
all_lr=T)
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
prep_dd_input(dat=dat, scale="stages", begin=begin_bins, finish=end_bins,
r=replicates, age_m = age_method, taxon_level=taxonomic_level,
all_lr=T)
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
prep_dd_input(dat=dat, scale="stages", begin=begin_bins, finish=end_bins,
r=replicates, age_m = age_method, taxon_level=taxonomic_level,
all_lr=T)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
prep_dd_input(dat=dat, scale="stages", begin=begin_bins, finish=end_bins,
r=replicates, age_m = age_method, taxon_level=taxonomic_level,
all_lr=T)
custom_bins <- -c(264.26, 224.54, 192.9)
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
prep_dd_input(dat=dat, scale="stages", begin=begin_bins, finish=end_bins,
r=replicates, age_m = age_method, taxon_level=taxonomic_level,
all_lr=T, custom_bins=custom_bins)
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
custom_bins <- -c(264.26, 224.54, 192.9)
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
prep_dd_input(dat=dat, scale="stages", begin=begin_bins, finish=end_bins,
r=replicates, age_m = age_method, taxon_level=taxonomic_level,
all_lr=T, custom_bins=custom_bins)
as.numeric(custom_bins)
custom_bins <- as.numeric(custom_bins)
custom_bins
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
custom_bins <- -c(264.26, 224.54, 192.9)
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
prep_dd_input(dat=dat, scale="stages", begin=begin_bins, finish=end_bins,
r=replicates, age_m = age_method, taxon_level=taxonomic_level,
all_lr=T, custom_bins=custom_bins)
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
custom_bins <- -c(264.26, 224.54, 192.9)
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
prep_dd_input(dat=dat, scale="stages", begin=begin_bins, finish=end_bins,
r=replicates, age_m = age_method, taxon_level=taxonomic_level,
all_lr=T, custom_bins=custom_bins)
# Data pipeline Permo-Triassic marine animals
# library(dplyr)
# library(data.table)
# library(tidyr)
# library(stringr)
setwd("~/DeepDiveR/R")
source("data_pipeline_utilities.R")
name <- "test_"
input_occs_file <- paste0(name, "empirical_data/NC_raw.csv")
# Settings
bins_scale <- "equal_bins"  # time bins set to stages, epochs or equal_bins
age_method <- "random_by_loc"  # can set random_by_loc, random, or median ages
replicates <- 2
begin_bins <- 264.28
end_bins <- 192.9
age_range_threshold <- NA # if e.g. = 2 occs with age range > 2 Myr are treated as low resolution, if NA assigns whether max_age-min_age is within the high or low resolution bins set
taxonomic_level <- "Genus"
all_lr <- T
dat <- read.csv(input_occs_file)
# Re-code geography
setDT(dat)[, Loc_ID:=.GRP, by=.(lng, lat, max_ma, min_ma)]
dat <- data.frame(dat$genus, dat$genus, dat$genus, dat$reg, dat$min_ma, dat$max_ma, dat$Loc_ID)
colnames(dat) <- c('Complete_name', 'Genus', 'Species', 'Area', 'MinAge', 'MaxAge', 'Locality')
dat$Complete_name <- NA
dat$Species <- NA
dat$Area <- str_replace_all(dat$Area, c("ctw" = "cta",
"cte" = "cta"))
custom_bins <- -c(264.26, 224.54, 192.9)
########
# CODE FOLLOWING CAN BE RUN IN ONE LINE AS BELOW
########
prep_dd_input(dat=dat, scale="stages", begin=begin_bins, finish=end_bins,
r=replicates, age_m = age_method, taxon_level=taxonomic_level,
all_lr=T, custom_bins=custom_bins)
use_git()
